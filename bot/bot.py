from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, MessageHandler, filters, ContextTypes,
    CommandHandler, CallbackQueryHandler
)
import os
import httpx
from postgres import SessionLocal, get_products_info

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
PROCESSOR_URL = os.getenv("PROCESSOR_URL")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ—Ä–∑–∏–Ω: user_id -> {prod_id: (name, price)}
user_carts = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ üòã\nüßê –£–∑–Ω–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ\nüìù –ü–æ–ø—Ä–æ—Å–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑\n\nüìå –°—Ç–∞—Ä–∞–π—Å—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ –æ–ø–∏—Å–∞—Ç—å —Ç–æ, —á—Ç–æ —Ö–æ—á–µ—à—å")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    context.user_data["last_query"] = text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    failed = False
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{PROCESSOR_URL}/process",
                json={"text": text, "user_id": str(user_id)}
            )
    except Exception:
        failed = True

    if failed or response.status_code != 200:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
        return

    response_json = response.json()

    if not response_json['outputs']:
        await update.message.reply_text('–í–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ :(')
        return

    if response_json['action'] == 0:
        # –ü—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        for ent in response_json['outputs']:
            products = get_products_info(SessionLocal(), response_json['outputs'][ent])
            await update.message.reply_text('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ ' + ent)
            for _, name, info, price in products:
                await update.message.reply_text(f'{name}:\n\n{info}\n\n   * {price} ‚ÇΩ')

    elif response_json['action'] == 1:
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ ent —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        for ent in response_json['outputs']:
            products = get_products_info(SessionLocal(), response_json['outputs'][ent])
            keyboard = []
            for prod_id, name, info, price in products:
                callback_data = f"addcart|{prod_id}"
                keyboard.append([InlineKeyboardButton(f"{name} - {price} ‚ÇΩ", callback_data=callback_data)])

            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(f'–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è "{ent}":', reply_markup=reply_markup)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–æ—Ä–∑–∏–Ω—ã
        show_cart_button = InlineKeyboardMarkup(
            [[InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É üõí", callback_data="showcart")]]
        )
        await update.message.reply_text("–ö–æ–≥–¥–∞ –≤—ã–±–µ—Ä–µ—Ç–µ –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=show_cart_button)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    data = query.data.split("|")
    action = data[0]

    if action == "addcart":
        prod_id = data[1]
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ç–µ –∏–∑ –ë–î –ø–æ prod_id
        with SessionLocal() as session:
            products = get_products_info(session, [prod_id])
            if not products:
                await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            # products –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
            _, name, _, price = products[0]

        cart = user_carts.setdefault(user_id, {})
        cart[prod_id] = (name, price)
        await query.edit_message_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É: {name} - {price} ‚ÇΩ")

    elif action == "showcart":
        cart = user_carts.get(user_id, {})
        if not cart:
            await query.edit_message_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
            return
        text_lines = ["–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"]
        total = 0
        for name, price in cart.values():
            text_lines.append(f"{name} ‚Äî {price} ‚ÇΩ")
            total += price
        text_lines.append(f"\n–ò—Ç–æ–≥–æ: {total} ‚ÇΩ")

        keyboard = [
            [InlineKeyboardButton("–ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑ üîÑ", callback_data="rebuildcart")],
            [InlineKeyboardButton("–í—Å—ë —Å—É–ø–µ—Ä! ‚úÖ", callback_data="confirmcart")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text("\n".join(text_lines), reply_markup=reply_markup)

    elif action == "rebuildcart":
        last_query = context.user_data.get("last_query")
        if not last_query:
            await query.edit_message_text("–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏.")
            return

        # –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–æ–π
        user_carts[user_id] = {}

        # –°–æ–∑–¥–∞—ë–º —Ñ–µ–π–∫–æ–≤—ã–π update —Å —Ç–µ–º –∂–µ —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ handle_message
        class FakeMessage:
            def __init__(self, text, user):
                self.text = text
                self.from_user = user
                self.chat = user

            async def reply_text(self, *args, **kwargs):
                pass

        class FakeUpdate:
            def __init__(self, message):
                self.message = message
                self.effective_user = message.from_user
                self.effective_chat = message.chat

        fake_message = FakeMessage(last_query, update.effective_user)
        fake_update = FakeUpdate(fake_message)

        await handle_message(fake_update, context)

    elif action == "confirmcart":
        user_carts[user_id] = {}
        await query.edit_message_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç ‚úÖ")

if __name__ == "__main__":
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.run_polling()
